// Generated by view binder compiler. Do not edit!
package com.monika.greatreaders.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.hbb20.CountryCodePicker;
import com.monika.greatreaders.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PhonePageBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CountryCodePicker ccp;

  @NonNull
  public final ImageView imageView2;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final EditText phoneno;

  @NonNull
  public final Button submit;

  private PhonePageBinding(@NonNull ConstraintLayout rootView, @NonNull CountryCodePicker ccp,
      @NonNull ImageView imageView2, @NonNull LinearLayout linearLayout, @NonNull EditText phoneno,
      @NonNull Button submit) {
    this.rootView = rootView;
    this.ccp = ccp;
    this.imageView2 = imageView2;
    this.linearLayout = linearLayout;
    this.phoneno = phoneno;
    this.submit = submit;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PhonePageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PhonePageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.phone_page, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PhonePageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ccp;
      CountryCodePicker ccp = rootView.findViewById(id);
      if (ccp == null) {
        break missingId;
      }

      id = R.id.imageView2;
      ImageView imageView2 = rootView.findViewById(id);
      if (imageView2 == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.phoneno;
      EditText phoneno = rootView.findViewById(id);
      if (phoneno == null) {
        break missingId;
      }

      id = R.id.submit;
      Button submit = rootView.findViewById(id);
      if (submit == null) {
        break missingId;
      }

      return new PhonePageBinding((ConstraintLayout) rootView, ccp, imageView2, linearLayout,
          phoneno, submit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
